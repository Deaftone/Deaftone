//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize, ToSchema)]
#[sea_orm(table_name = "albums")]
#[schema(as = entity::album::Model)]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    #[schema(example = "Album")]
    pub id: String,
    pub path: String,
    pub name: String,
    pub album_artist: Option<String>,
    pub album_artist_sort: Option<String>,
    pub album_artist_credit: Option<String>,
    pub genre: Option<String>,
    pub style: Option<String>,
    pub discogs_albumid: Option<String>,
    pub discogs_artistid: Option<String>,
    pub discogs_labelid: Option<String>,
    pub year: i32,
    pub composer: Option<String>,
    pub mb_album_id: Option<String>,
    pub mb_artist_id: Option<String>,
    pub album_type: Option<String>,
    pub label: Option<String>,
    pub mb_releasegroup_id: Option<String>,
    pub asin: Option<String>,
    pub catalog_num: Option<String>,
    pub script: Option<String>,
    pub language: Option<String>,
    pub country: Option<String>,
    pub album_status: Option<String>,
    pub album_disambig: Option<String>,
    pub release_group_disambig: Option<String>,
    pub artist_name: String,
    pub cover: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub artist_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::artist::Entity",
        from = "Column::ArtistId",
        to = "super::artist::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Artist,
    #[sea_orm(has_many = "super::song::Entity")]
    Song,
}

impl Related<super::artist::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Artist.def()
    }
}

impl Related<super::song::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Song.def()
    }
}

/* pub struct SongsForAlbum;

impl Linked for SongsForAlbum {
    type FromEntity = Entity;

    type ToEntity = super::songs::Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![
            super::albums::Relation::Songs.def(),
            super::songs::Relation::Albums.def().rev(),
        ]
    }
} */
impl ActiveModelBehavior for ActiveModel {}
