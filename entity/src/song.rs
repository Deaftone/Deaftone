//! SeaORM Entity. Generated by sea-orm-codegen 0.9.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize, ToSchema)]
#[sea_orm(table_name = "songs")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(unique)]
    pub path: String,
    pub title: String,
    pub artist: String,
    pub album_name: String,
    pub track: Option<i32>,
    pub disk: Option<i32>,
    pub codec: Option<String>,
    pub duration: u32,
    pub year: Option<i32>,
    pub label: Option<String>,
    pub sample_rate: Option<String>,
    pub bits_per_sample: Option<i32>,
    pub mb_recording_id: Option<String>,
    pub mb_artist_id: Option<String>,
    pub mb_track_id: Option<String>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub album_id: Option<String>,
    pub liked: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::album::Entity",
        from = "Column::AlbumId",
        to = "super::album::Column::Id",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Album,
}

impl Related<super::album::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Album.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
