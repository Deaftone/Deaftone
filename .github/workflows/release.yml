name: Release
on:
  # schedule:
  # - cron: '0 0 * * *' # midnight UTC
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
    ## - release

env:
  BIN_NAME: deaftone
  PROJECT_NAME: deaftone
  REPO_NAME: Ortygia/Deaftone

jobs:
  dist:
    name: Dist
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false # don't fail other jobs if one fails
      matrix:
        build_target: [linux-x86_64, linux-arm64, linux-armhf, macos-x86_64, windows-x86_64]
        include:
          - build_target: linux-x86_64
            os: ubuntu-latest
            container: rust
            target: x86_64-unknown-linux-gnu
          - build_target: linux-arm64
            os: ubuntu-latest
            container: rustembedded/cross:aarch64-unknown-linux-gnu-0.2.1
            target: aarch64-unknown-linux-gnu
            dependencies: 'libssl-dev:arm64'
            cross_arch: 'arm64'
            pkg_config_path: '/usr/lib/aarch64-linux-gnu/pkgconfig/'
          - build_target: linux-armhf
            os: ubuntu-latest
            container: rustembedded/cross:armv7-unknown-linux-gnueabihf-0.2.1
            target: armv7-unknown-linux-gnueabihf
            dependencies: 'libssl-dev:armhf'
            cross_arch: 'armhf'
            pkg_config_path: '/usr/lib/arm-linux-gnueabihf/pkgconfig/'
          - build_target: macos-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
          - build_target: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
          profile: minimal
      - name: Install macOS dependencies
        if: matrix.os == 'macos-latest'
        run: brew install portaudio pkg-config
      - name: Set up cross compilation
        if: matrix.cross_arch
        run: |
          dpkg --add-architecture ${{ matrix.cross_arch }}
          echo "PKG_CONFIG_PATH=${{ matrix.pkg_config_path }}" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALLOW_CROSS=1" >> $GITHUB_ENV
      - name: Install Linux dependencies
        if: startsWith(matrix.build_target, 'linux-')
        run: |
          apt update
          apt install -y ${{ matrix.dependencies }}
      - name: Running Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked --release --target ${{ matrix.target }}
      - name: Build archive
        shell: bash
        run: |
          mkdir dist
          ls -alh
          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/${{ matrix.target }}/release/$BIN_NAME.exe" "dist/"
          else
            cp "target/${{ matrix.target }}/release/$BIN_NAME" "dist/"
          fi
      - uses: actions/upload-artifact@v2.2.4
        with:
          name: bins-${{ matrix.build }}
          path: dist

  publish:
    name: Publish
    needs: [dist]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: actions/download-artifact@v2
        # with:
        #   path: dist
      # - run: ls -al ./dist
      - run: ls -al bins-*

      - name: Calculate tag name
        run: |
          name=dev
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            name=${GITHUB_REF:10}
          fi
          echo ::set-output name=val::$name
          echo TAG=$name >> $GITHUB_ENV
        id: tagname

      - name: Build archive
        shell: bash
        run: |
          set -ex
          rm -rf tmp
          mkdir tmp
          mkdir dist
          for dir in bins-* ; do
              platform=${dir#"bins-"}
              unset exe
              if [[ $platform =~ "windows" ]]; then
                  exe=".exe"
              fi
              pkgname=$PROJECT_NAME-$TAG-$platform
              mkdir tmp/$pkgname
              # cp LICENSE README.md tmp/$pkgname
              mv bins-$platform/$BIN_NAME$exe tmp/$pkgname
              chmod +x tmp/$pkgname/$BIN_NAME$exe
              if [ "$exe" = "" ]; then
                  tar cJf dist/$pkgname.tar.xz -C tmp $pkgname
              else
                  (cd tmp && 7z a -r ../dist/$pkgname.zip $pkgname)
              fi
          done
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          file_glob: true
          tag: ${{ steps.tagname.outputs.val }}
          overwrite: true